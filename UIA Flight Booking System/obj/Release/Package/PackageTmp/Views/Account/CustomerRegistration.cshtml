@using UIA_Flight_Booking_System.ViewModels
@model CustomerRegistrationViewModel

@{
    ViewBag.Title = "CustomerRegistration";
}
<link rel="stylesheet" type="text/css" href="~/Content/CustomerRegistration.css">
<link rel="stylesheet" href="~/Content/themes/base/jquery-ui.min.css">
<script src="~/Scripts/jquery-1.12.4.min.js"></script>
<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>

@using (Html.BeginForm())
{
    <div class="container">
        <h1 class="well">Registration Form</h1>
        <div class="col-lg-12 well">
            <div class="row">
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-6 form-group">
                            @Html.LabelFor(model => model.Fname)
                            @Html.TextBoxFor(model => model.Fname, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Fname, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6 form-group">
                            @Html.LabelFor(model => model.Lname)
                            @Html.TextBoxFor(model => model.Lname, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Lname, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-10 form-group">
                            @Html.LabelFor(model => model.Address)
                            @Html.TextAreaFor(model => model.Address, htmlAttributes: new { @class = "form-control", rows = "5" })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4 form-group">
                            @Html.LabelFor(model => model.IcNum)
                            @Html.TextBoxFor(model => model.IcNum, htmlAttributes: new { @class = "form-control number" })
                            @Html.ValidationMessageFor(model => model.IcNum, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-4 form-group">
                            @Html.LabelFor(model => model.DOB)
                            @Html.TextBoxFor(model => model.DOB, htmlAttributes: new { @class = "form-control", id = "datepicker" })
                            @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-4 form-group">
                            @Html.LabelFor(model => model.Gender)
                            @Html.DropDownListFor(model => model.Gender, new SelectList(Enum.GetValues(typeof(Gender))), "Select Gender", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4 form-group">
                            @Html.LabelFor(model => model.ContactNum)
                            @Html.TextBoxFor(model => model.ContactNum, htmlAttributes: new { @class = "form-control number" })
                            @Html.ValidationMessageFor(model => model.ContactNum, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-4 form-group">
                            @Html.LabelFor(model => model.Email)
                            @Html.TextBoxFor(model => model.Email, htmlAttributes: new { @class = "form-control", type = "email" })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row">
                        <div class='form-group col-sm-4'>
                            @Html.LabelFor(model => model.Username)
                            @Html.TextBoxFor(model => model.Username, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-6 form-group">
                            @Html.LabelFor(model => model.Password)
                            @Html.TextBoxFor(model => model.Password, htmlAttributes: new { @class = "form-control", type = "password" })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6 form-group">
                            @Html.LabelFor(model => model.ConfirmPassword)
                            @Html.TextBoxFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "form-control", type = "password" })
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <button type="submit" class="btn btn-lg btn-info">Submit</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        $.noConflict();
        jQuery(document).ready(function ($) {
            $("#datepicker").datepicker({
                changeMonth: true,
                changeYear: true,
                yearRange: "-100:-18",
            });

            $(".number").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                    // Allow: Ctrl+A, Command+A
                    (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                    // Allow: home, end, left, right, down, up
                    (e.keyCode >= 35 && e.keyCode <= 40)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });
        });
    </script>

}

